{"version":3,"sources":["VisualisingToolPathfinder/components/Node.js","VisualisingToolPathfinder/components/Key.js","VisualisingToolPathfinder/algorithms/Helper.js","VisualisingToolPathfinder/components/Field.js","VisualisingToolPathfinder/algorithms/BFS.js","VisualisingToolPathfinder/Pathfinder.js","App.js","serviceWorker.js","index.js"],"names":["Node","this","props","isStart","isFinish","isWall","row","col","onMouseDown","onMouseEnter","onMouseUp","isKey","keyClass","classNames","className","id","Component","Key","updateNeighbourNodes","node","grid","getUnvisitedNeighbours","forEach","neighbour","distance","prevNode","neighbours","isVisited","push","length","Field","handleBFS","setState","isRunning","canReset","state","startNodeCoords","finishNodeCoords","startNode","finishNode","visitedNodes","visNodes","unVisNodes","curNode","shift","concat","BFS","animateSearch","i","setTimeout","animatePath","document","getElementById","classList","add","shortestPath","reverse","initaliseScreen","rowSize","colSize","width","height","columns","current","childNodes","column","remove","window","innerWidth","innerHeight","Math","floor","createGrid","generateRandomNode","curRow","j","createNode","setStartAndFinishNodes","Infinity","startRow","endRow","startCol","endCol","random","generateWalls","clearWalls","handleMouseUp","mouseDown","isStartMoving","isFinishMoving","handleMouseEnter","console","log","handleMouseDown","start","algorithmTitle","chooseAlgorithm","name","resetNodes","screenWidth","React","createRef","addEventListener","curScreenWidth","gridShowVar","ref","map","rowIdx","key","nodeIdx","Navbar","collapseOnSelect","expand","variant","bg","sticky","Brand","href","Nav","NavDropdown","title","Item","onClick","active","Divider","Button","disabled","Link","size","withGetScreen","Pathfinder","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.98849468.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"../css/Node.css\";\r\n\r\nexport default class Node extends Component {\r\n  render() {\r\n    const {\r\n      isStart,\r\n      isFinish,\r\n      isWall,\r\n      row,\r\n      col,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      isKey,\r\n      keyClass\r\n    } = this.props;\r\n\r\n    // Figure out the type of the node\r\n    let classNames = `node`;\r\n    classNames += isStart ? ` node-start` : ``;\r\n    classNames += isFinish ? ` node-finish` : ``;\r\n    classNames += isWall ? ` node-wall` : ``;\r\n\r\n    // Add specific class if the node is part of the Key/Legend\r\n    if (isKey) {\r\n      return <div className={`node-key ${keyClass}`}></div>;\r\n    }\r\n\r\n    return (\r\n      <div \r\n        id = {`row-${row}-col-${col}`}\r\n        onMouseDown = {() => onMouseDown(row, col)}\r\n        onMouseEnter = {() => onMouseEnter(row, col)}\r\n        onMouseUp = {() => onMouseUp(row, col)}\r\n        className = {classNames}\r\n      ></div>\r\n    );\r\n  }\r\n}","import React , {Component } from \"react\";\r\nimport Node from './Node';\r\nimport \"../css/Key.css\";\r\n\r\nexport default class Key extends Component {\r\n  render() {\r\n    return (\r\n      <ul className=\"key\">\r\n        <li>\r\n          <Node isKey={true} keyClass=\"node-start-key\"></Node>\r\n          <span className=\"key-align\">Start</span>\r\n        </li>\r\n        <li>\r\n          <Node isKey={true} keyClass=\"node-finish-key\"></Node>\r\n          <span className=\"key-align\">Target</span>\r\n        </li>\r\n        <li>\r\n          <Node isKey={true} keyClass=\"node-unvisited-key\"></Node>\r\n          <span className=\"key-align\">Unvisited</span>\r\n        </li>\r\n        <li>\r\n          <Node isKey={true} keyClass=\"node-visited-key\"></Node>\r\n          <span className=\"key-align\">Visited</span>\r\n        </li>\r\n        <li>\r\n          <Node isKey={true} keyClass=\"node-path-key\"></Node>\r\n          <span className=\"key-align\">Path</span>\r\n        </li>\r\n        <li>\r\n          <Node isKey={true} keyClass=\"node-wall-key\"></Node>\r\n          <span className=\"key-align\">Wall</span>\r\n        </li>\r\n      </ul>\r\n    );\r\n  }\r\n}","// update neighbour nodes by connecting them with current node\r\nexport function updateNeighbourNodes(node, grid) {\r\n  const neighbours = getUnvisitedNeighbours(node, grid);\r\n  neighbours.forEach((neighbour) => {\r\n    neighbour.distance = node.distance + 1;\r\n    neighbour.prevNode = node;\r\n  }\r\n  );\r\n}\r\n\r\n// to get neighbour nodes\r\nexport function getUnvisitedNeighbours(node, grid) {\r\n  let neighbours = [];\r\n  const {row, col} = node;\r\n  if(row > 0 && !grid[row-1][col].isVisited) neighbours.push(grid[row-1][col]);\r\n  if(row < grid.length-1 && !grid[row+1][col].isVisited) neighbours.push(grid[row+1][col]);\r\n  if(col > 0 && !grid[row][col-1].isVisited) neighbours.push(grid[row][col-1]);\r\n  if(col < grid[0].length-1 && !grid[row][col+1].isVisited) neighbours.push(grid[row][col+1]);\r\n  return neighbours;\r\n}","import React, { Component } from \"react\";\r\nimport { withGetScreen } from \"react-getscreen\";\r\nimport Navbar from \"react-bootstrap/Navbar\";\r\nimport Nav from \"react-bootstrap/Nav\";\r\nimport NavDropdown from \"react-bootstrap/NavDropdown\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nimport { FaPlay } from 'react-icons/fa';\r\nimport { FaTools } from 'react-icons/fa';\r\nimport { FaTimesCircle } from 'react-icons/fa';\r\nimport { FaSyncAlt } from 'react-icons/fa';\r\nimport { FaGithub } from 'react-icons/fa';\r\n\r\nimport \"../css/Field.css\";\r\nimport  Node from \"./Node\";\r\nimport Key from \"./Key\";\r\nimport { BFS } from \"../algorithms/BFS\";\r\n\r\nconst widthBreakPoint = 1000;\r\n\r\nclass Field extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: [],\r\n      rowSize: 0,\r\n      colSize: 0,\r\n      startNodeCoords: { row: 0, col: 0},\r\n      finishNodeCoords: { row: 0, col: 0},\r\n      prevNode: { row: 0, col: 0},\r\n      mouseDown: false,\r\n      screenWidth: null,\r\n      isRunning: false,\r\n      canReset: true,\r\n      algorithmTitle: \"\"\r\n    };\r\n    this.grid = React.createRef();\r\n  }\r\n\r\n  componentDidMount() {\r\n    window.addEventListener(\"resize\", () => {\r\n      this.initaliseScreen();\r\n    });\r\n    this.initaliseScreen();\r\n  };\r\n\r\n  // handling BFS algorithm\r\n  handleBFS = () => {\r\n    this.setState(\r\n      {\r\n        isRunning: true,\r\n        canReset: false\r\n      },\r\n      () => {\r\n        const { grid, startNodeCoords, finishNodeCoords } = this.state;\r\n        const startNode = grid[startNodeCoords.row][startNodeCoords.col];\r\n        const finishNode = grid[finishNodeCoords.row][finishNodeCoords.col];\r\n        const visitedNodes = BFS(startNode, finishNode, grid);\r\n        this.animateSearch(visitedNodes, finishNode);\r\n      }\r\n    );\r\n  };\r\n\r\n  // animating the searching process\r\n  animateSearch = (visitedNodes, finishNode) => {\r\n    for(let i=0; i<=visitedNodes.length; i++){\r\n      if(i === visitedNodes.length){\r\n        setTimeout(() => {\r\n          this.animatePath(finishNode);\r\n        }, 30 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const{ row, col } = visitedNodes[i];\r\n        document\r\n        .getElementById(`row-${row}-col-${col}`)\r\n        .classList.add(\"node-visited\");\r\n      }, 30 * i);\r\n    }\r\n    \r\n  };\r\n  // finding and animating final path\r\n  animatePath = (finishNode) => {\r\n    if(!finishNode.isVisited){\r\n      this.setState({canReset: true});\r\n      return;\r\n    }\r\n    // finding shortest path using recursion\r\n    let shortestPath = []    \r\n    let curNode = finishNode;\r\n    while(curNode !== null){\r\n      shortestPath.push(curNode);\r\n      curNode = curNode.prevNode;\r\n    }\r\n    shortestPath.reverse();\r\n\r\n    // animate path\r\n    for(let i=0; i<=shortestPath.length; i++){\r\n      if(i === shortestPath.length){\r\n        setTimeout(() => {\r\n          this.setState({canReset: true});\r\n        }, 50 * i);\r\n        return;\r\n      }\r\n      setTimeout(() => {\r\n        const { row, col } = shortestPath[i];\r\n        document\r\n          .getElementById(`row-${row}-col-${col}`)\r\n          .classList.add(\"node-path\");\r\n      }, 50 * i);\r\n    }\r\n  };\r\n\r\n  // initalise grid according to avaialble screen\r\n  initaliseScreen = () => {\r\n    const columns = this.grid.current.childNodes; // get iterable list of columns\r\n    for (const column of columns) {\r\n      // this returns HTML DOM elements with className = \"column\"\r\n      for (const node of column.childNodes) {\r\n        // iterate through the nodes in the DOM tree of the column\r\n        node.classList.remove(`node-path`);\r\n        node.classList.remove(`node-visited`);\r\n      }\r\n    }    \r\n    let rowSize, colSize, width, height;\r\n    width = window.innerWidth;\r\n    height = window.innerHeight;\r\n    rowSize = Math.floor((height * 0.80) / 30);\r\n    colSize = Math.floor((width * 0.97) / 30);\r\n\r\n    if(rowSize < 1) rowSize = 1;\r\n    if(colSize < 1) colSize = 1;\r\n    \r\n    this.setState({\r\n      rowSize,\r\n      colSize\r\n    });\r\n    this.createGrid(rowSize, colSize);\r\n  };\r\n\r\n  // create a grid\r\n  createGrid = (rowSize, colSize) => {\r\n    let startNode = { row: 0, col: 0}, finishNode = { row: 0, col: 0};\r\n    startNode = this.generateRandomNode(0, rowSize, 0, 5);\r\n    finishNode = this.generateRandomNode(0, rowSize, colSize-5, colSize);\r\n    let grid = [];\r\n    for(let i=0; i<rowSize; i++){\r\n      let curRow = [];\r\n      for(let j=0;j<colSize; j++){\r\n        curRow.push(this.createNode(i,j));\r\n      }\r\n      grid.push(curRow);\r\n    }\r\n    this.setStartAndFinishNodes(grid, startNode, finishNode);\r\n    this.setState({\r\n      grid,\r\n      startNodeCoords: { row: startNode.row, col: startNode.col },\r\n      finishNodeCoords: { row: finishNode.row, col: finishNode.col }\r\n    });\r\n  };\r\n\r\n  // create a node\r\n  createNode = (row, col) => {\r\n    return {\r\n      row,\r\n      col,\r\n      isStart: false,\r\n      isFinish: false,\r\n      isVisited: false,\r\n      isWall: false,\r\n      prevNode: null,\r\n      distance: Infinity\r\n    };\r\n  };\r\n\r\n  // set start and finish nodes\r\n  setStartAndFinishNodes = (grid, startNode, finishNode) => {\r\n    grid[startNode.row][startNode.col].isStart = true;\r\n    grid[finishNode.row][finishNode.col].isFinish = true;\r\n  };\r\n\r\n  // random initalization of a node with given ranges\r\n  generateRandomNode = (startRow, endRow, startCol, endCol) => {\r\n    let randomRow = Math.floor( Math.random() * (endRow - startRow)) + 1;\r\n    let randomCol = Math.floor( Math.random() * (endCol - startCol)) + 1;\r\n    let row = endRow - randomRow, col = endCol - randomCol ;\r\n    return {  row, col } ;\r\n  }\r\n\r\n  // generating random walls\r\n  generateWalls = (grid) => {\r\n    const rowSize = grid.length, colSize = grid[0].length;\r\n    for(let i=0; i<rowSize; i++){\r\n      for(let j=0; j<colSize; j++){\r\n          if(Math.random() * 10 > 9){\r\n            if(grid[i][j].isStart || grid[i][j].isFinish) continue;\r\n            grid[i][j].isWall = true;\r\n          }\r\n      }\r\n    }\r\n    this.setState({ grid });\r\n  }\r\n  // clearing all walls\r\n  clearWalls = (grid) => {\r\n    const rowSize = grid.length, colSize = grid[0].length;\r\n    for(let i=0; i<rowSize; i++){\r\n      for(let j=0; j<colSize; j++){\r\n          if(grid[i][j].isWall) grid[i][j].isWall = false;\r\n      }\r\n    }\r\n    this.setState({ grid });\r\n  }\r\n\r\n  // handling mouse events to add or remove walls or change start, end positions\r\n  handleMouseUp = (row, col) => {\r\n    const {\r\n      grid,\r\n      mouseDown,\r\n      isRunning,\r\n      isStartMoving,\r\n      isFinishMoving\r\n    } = this.state;\r\n    if(!mouseDown || isRunning) return;\r\n\r\n    let curNode = grid[row][col];\r\n    if(isStartMoving){\r\n      curNode.isStart = true;\r\n      curNode.isWall = false;\r\n      this.setState({ \r\n        startNodeCoords: {row, col},\r\n        prevNode: {row, col},\r\n        isStartMoving: false\r\n      });\r\n    }\r\n    else if(isFinishMoving){\r\n      curNode.isFinish = true;\r\n      curNode.isWall = false;\r\n      this.setState({ \r\n        finishNodeCoords: {row, col},\r\n        prevNode: {row, col},\r\n        isFinishMoving: false\r\n      });\r\n    }\r\n    else{\r\n      curNode.isWall = !curNode.isWall;\r\n    }\r\n    this.setState({ mouseDown: false});\r\n  }\r\n  handleMouseEnter = (row, col) => {\r\n    const {\r\n      grid,\r\n      prevNode,\r\n      isRunning,\r\n      mouseDown,\r\n      isStartMoving,\r\n      isFinishMoving\r\n    } = this.state;\r\n    if(!mouseDown || isRunning) return ;\r\n\r\n    let curNode = grid[row][col];\r\n    if(isStartMoving){\r\n      console.log(this.state.startNodeCoords);\r\n      curNode.isStart = true;\r\n      grid[prevNode.row][prevNode.col].isStart = false;\r\n      this.setState({ prevNode: {row, col}});\r\n    }\r\n    else if(isFinishMoving){\r\n      curNode.isFinish = true;\r\n      grid[prevNode.row][prevNode.col].isFinish = false;\r\n      this.setState({ prevNode: {row, col}});\r\n    }\r\n    else{\r\n      curNode.isWall = !curNode.isWall;\r\n    }\r\n    \r\n    this.setState({ mouseDown: true});\r\n  }\r\n  handleMouseDown = (row, col) => {\r\n    const { grid, isRunning } = this.state;\r\n    if(isRunning) return ;\r\n\r\n    let curNode = grid[row][col];\r\n    if(curNode.isStart){\r\n      curNode.isStart = false;\r\n      this.setState({ isStartMoving: true, prevNode: {row, col}});\r\n    }\r\n    else if(curNode.isFinish){\r\n      curNode.isFinish = false;\r\n      this.setState({ isFinishMoving: true, prevNode: {row, col}});\r\n    }\r\n    this.setState({mouseDown: true});\r\n\r\n  }\r\n\r\n  // start implementing algorithem\r\n  start = () => {\r\n    let chosenAlgorithm = this.state.algorithmTitle;\r\n\r\n    if (chosenAlgorithm === \"BFS\") {\r\n      this.handleBFS();\r\n    }\r\n  };\r\n\r\n  // choose an algorithem\r\n  chooseAlgorithm = (name) => {\r\n    this.setState({ algorithmTitle: name });\r\n  };\r\n\r\n  // reset grid\r\n  resetNodes = () => {\r\n    const columns = this.grid.current.childNodes; // get iterable list of columns\r\n    for (const column of columns) {\r\n      // this returns HTML DOM elements with className = \"column\"\r\n      for (const node of column.childNodes) {\r\n        // iterate through the nodes in the DOM tree of the column\r\n        node.classList.remove(`node-path`);\r\n        node.classList.remove(`node-visited`);\r\n      }\r\n    }\r\n\r\n    this.initaliseScreen();\r\n    this.setState({\r\n      isRunning: false\r\n    });\r\n  };\r\n\r\n  render() {\r\n    const { grid } = this.state;\r\n    let curScreenWidth = window.innerWidth;\r\n    let gridShowVar = \r\n      <div className = \"grid\" ref = {this.grid}>\r\n      {grid.map((row, rowIdx) => {\r\n        return (\r\n          <div key={rowIdx}>\r\n            {row.map((node, nodeIdx) => {\r\n              const {\r\n                row,\r\n                col,\r\n                isStart,\r\n                isFinish,\r\n                isWall,\r\n                isVisited,\r\n              } = node;\r\n              const { colSize } = this.state;\r\n              return (\r\n                <Node\r\n                  key = {rowIdx * colSize + nodeIdx}\r\n                  row = {row}\r\n                  col = {col}\r\n                  isStart = {isStart}\r\n                  isFinish = {isFinish}\r\n                  isWall = {isWall}\r\n                  isVisited = {isVisited}\r\n                  onMouseDown={this.handleMouseDown}\r\n                  onMouseUp={this.handleMouseUp}\r\n                  onMouseEnter={this.handleMouseEnter}\r\n                ></Node>\r\n              );\r\n            })}\r\n          </div>                \r\n        );\r\n      })}\r\n    </div> ;\r\n\r\n    if(curScreenWidth >= widthBreakPoint){\r\n      return (\r\n        <>\r\n          <Navbar className=\"navbar\" collapseOnSelect expand=\"lg\" variant=\"dark\" bg=\"dark\" sticky=\"top\" >\r\n            <Navbar.Brand href=\"#\">PathFinder</Navbar.Brand>\r\n  \r\n            <Nav className = \"col-auto\">\r\n              <NavDropdown className = \"mr-sm-2\" title={this.state.algorithmTitle || \"Choose Algo\"} \r\n                id=\"collasible-nav-dropdown\">\r\n                <NavDropdown.Item \r\n                onClick = {() => this.chooseAlgorithm(\"BFS\")}\r\n                active = {this.state.algorithmTitle === \"BFS\"}\r\n                href=\"#\">BFS</NavDropdown.Item>\r\n                <NavDropdown.Divider />\r\n              </NavDropdown>\r\n            </Nav>\r\n  \r\n            <Nav className = \"mr-auto\">\r\n              <Button className = \"mr-sm-2\" variant=\"success\"\r\n                onClick = {this.start} disabled={this.state.isRunning || this.state.algorithmTitle === \"\"}\r\n              >\r\n                <FaPlay /> Start\r\n              </Button>\r\n  \r\n              <Button className = \"mr-sm-2\" variant=\"warning\"\r\n                onClick = {() => this.generateWalls(grid)} disabled={this.state.isRunning}\r\n              >\r\n                <FaTools /> Build Walls\r\n              </Button>\r\n  \r\n              <Button className = \"mr-sm-2\" variant=\"secondary\"\r\n                onClick = {() => this.clearWalls(grid)} disabled={this.state.isRunning}\r\n              >\r\n                <FaTimesCircle /> Clear Walls\r\n              </Button>\r\n              <Button className = \"mr-sm-2\" variant=\"danger\"\r\n                onClick = {this.resetNodes} disabled={!this.state.canReset}\r\n              >\r\n                <FaSyncAlt /> Reset\r\n              </Button>\r\n            </Nav>\r\n            <Nav>\r\n              <Nav.Link href=\"#\"><FaGithub size=\"30\"/></Nav.Link>\r\n            </Nav>\r\n          </Navbar>\r\n\r\n          <Key /> \r\n  \r\n          {gridShowVar}     \r\n \r\n  \r\n        </>\r\n      );\r\n    }\r\n    else{\r\n      return (\r\n        <>\r\n          <Navbar className=\"navbar\" collapseOnSelect variant=\"dark\" bg=\"dark\" sticky=\"top\" >\r\n  \r\n            <Nav className = \"mr-auto\">\r\n              <Button className = \"mr-2\" variant=\"success\"\r\n                onClick = {this.start} disabled={this.state.isRunning || this.state.algorithmTitle === \"\"}\r\n              >\r\n                <FaPlay />\r\n              </Button>\r\n  \r\n              <Button className = \"mr-2\" variant=\"warning\"\r\n                onClick = {() => this.generateWalls(grid)} disabled={this.state.isRunning}\r\n              >\r\n                <FaTools />\r\n              </Button>\r\n  \r\n              <Button className = \"mr-2\" variant=\"secondary\"\r\n                onClick = {() => this.clearWalls(grid)} disabled={this.state.isRunning}\r\n              >\r\n                <FaTimesCircle />\r\n              </Button>\r\n              <Button className = \"mr-2\" variant=\"danger\"\r\n                onClick = {this.resetNodes} disabled={!this.state.canReset}\r\n              >\r\n                <FaSyncAlt />\r\n              </Button>\r\n            </Nav>\r\n            <Nav >\r\n              <NavDropdown className = \"mr-2\" title={this.state.algorithmTitle || \"Choose Algo\"} \r\n                id=\"collasible-nav-dropdown\">\r\n                <NavDropdown.Item \r\n                onClick = {() => this.chooseAlgorithm(\"BFS\")}\r\n                active = {this.state.algorithmTitle === \"BFS\"}\r\n                href=\"#\">BFS</NavDropdown.Item>\r\n                <NavDropdown.Divider />\r\n              </NavDropdown>\r\n              {/* <Nav.Link href=\"#\"><FaGithub size=\"30\"/></Nav.Link> */}\r\n            </Nav>\r\n            \r\n          </Navbar>\r\n  \r\n          {gridShowVar}       \r\n  \r\n        </>\r\n      );\r\n    }    \r\n  }\r\n}\r\n\r\nexport default withGetScreen(Field);","import { updateNeighbourNodes, getUnvisitedNeighbours } from \"./Helper\";\r\n\r\nexport function BFS(startNode, finishNode, grid) {\r\n  let visNodes = [];\r\n  let unVisNodes = [startNode];\r\n  startNode.distance = 0;\r\n\r\n  while(unVisNodes.length > 0){\r\n    let curNode = unVisNodes.shift();\r\n\r\n    if(curNode.isVisited || curNode.isWall) continue;\r\n    curNode.isVisited = true;\r\n    visNodes.push(curNode);\r\n\r\n    if(curNode === finishNode) break;\r\n    let neighbours = getUnvisitedNeighbours(curNode, grid);\r\n    updateNeighbourNodes(curNode, grid);\r\n    unVisNodes = unVisNodes.concat(neighbours);\r\n  }\r\n\r\n  return visNodes;\r\n}","import React, { Component } from \"react\";\r\n\r\nimport Field from \"./components/Field\";\r\nexport default class Pathfinder extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  componentDidMount() {}\r\n  \r\n  render() {\r\n    return (\r\n      <Field />\r\n    );\r\n  }\r\n}","import React from 'react';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport Pathfinder from './VisualisingToolPathfinder/Pathfinder';\n\nfunction App() {\n  return (\n    <div className = \"App\">\n      <Pathfinder />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}